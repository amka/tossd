//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "agreement")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub inner_title: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub author_id: i64,
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::agreement_acceptance_status::Entity")]
    AgreementAcceptanceStatus,
    #[sea_orm(has_many = "super::agreement_versions::Entity")]
    AgreementVersions,
}

impl Related<super::agreement_acceptance_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AgreementAcceptanceStatus.def()
    }
}

impl Related<super::agreement_versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AgreementVersions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
