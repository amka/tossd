//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::agreements::Agreement;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "agreements")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub internal_name: String,
    pub public_title: String,
    #[sea_orm(column_type = "Text")]
    pub public_text: String,
    pub status: i32,
    pub published_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub author_id: Option<String>,
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}


impl Agreement {
    pub fn from_model(model: Model) -> Self {
        Self {
            id: model.id,
            internal_name: model.internal_name,
            public_title: model.public_title,
            public_text: model.public_text,
            status: model.status,
            published_at: model.published_at.unwrap_or_default().to_string(),
            created_at: model.created_at.to_string(),
            updated_at: model.updated_at.to_string(),
            author_id: model.author_id.unwrap_or_default(),
            deleted: model.deleted,
            ..Default::default()
        }
    }
}