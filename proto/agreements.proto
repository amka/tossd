syntax = "proto3";

package agreements;

option go_package = "agreements";

// Статус: черновик или опубликован
enum AgreementStatus {
  DRAFT = 0;
  PUBLISHED = 1;
}

// Соглашение
message Agreement {
  int32 id = 1;
  //  внутреннее название
  string internal_name = 2;
  // публичный заголовок
  string public_title = 3;
  // публичный текст в формате html, markdown или plain
  string public_text = 4;
  // статус: черновик или опубликован
  AgreementStatus status = 5;
  // дату публикации
  string published_at = 6;
  // дату создания
  string created_at = 7;
  // дату изменения
  string updated_at = 8;
  // автора последнего изменения
  string author_id = 9;
  // флаг удаления
  bool deleted = 10;
}

// состояние принятия соглашения пользователем
message AgreementAcceptance {
  int32 id = 1;
  // идентификатор соглашения
  string agreement_id = 2;
  // идентификатор пользователя
  string user_id = 3;
  // флаг принятия
  bool accepted = 4;
  // дату принятия
  string accepted_at = 5;
}

message AgreementAcceptanceResponse {
  bool accepted = 1;
}

message GetAgreementRequest {
  int32 id = 1;
}

// Сервис управления соглашениями
service AgreementsService {
  // создает новое соглашение
  rpc CreateAgreement(Agreement) returns (Agreement);
  // обновляет существующее соглашение
  rpc UpdateAgreement(Agreement) returns (Agreement);
  // удаляет существующее соглашение
  rpc DeleteAgreement(Agreement) returns (Agreement);
  // возвращает соглашение по идентификатору
  rpc GetAgreement(GetAgreementRequest) returns (Agreement);
  // возвращает все состояния принятия соглашения для пользователя
  rpc GetAgreementAcceptances(Agreement) returns (stream AgreementAcceptance);
  // устанавливает состояние принятия соглашения для пользователя
  rpc SetAgreementAcceptance(AgreementAcceptance) returns (AgreementAcceptanceResponse);
}
